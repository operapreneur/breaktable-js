{"version":3,"sources":["breaktable.js"],"names":["breakTableContainers","document","querySelectorAll","lengthBreakTables","length","windowWidth","window","innerWidth","mobileBreakWidth","addEventListener","windowWidthBreakTable","setBreakTableContainers","getBreakTableContainers","i","table","getElementsByTagName","l","dataset","breaktables","btcolumns","buildBreakTables","console","log","iBTcontainer","btClass","setBTclassName","classArray","getClassNames","btID","setBTidName","breakcolumns","JSON","parse","newTables","parseInt","totalColumns","t","createElement","classList","add","id","tableNode","addBTchildren","closest","appendChild","className","btclass","split","push","btidentifier","newIndex","tableIndex","children","tagName","child","addBTrows","childIndex","childNode","rowIndex","rows","btid","getBTrowTrue","row","addBTrow","getBTcells","rowsIndex","str","array","includes","index","rowNode","columnIndex","cell","cellInterval","cellIndex","getBTcellTagName","cellVals","appendCell","scope","getBTcellScope","getBTcellColSpan","getBTcellRowSpan","element","addBTcell","cellColSpan","colSpan","spanLength","spanMax","innerHTML"],"mappings":"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","file":"bundle.js","sourcesContent":["// Basic Table rules\n// 1. Scope is only added to <th> elements\n\n// data-breaktables=\"popup|integer\"\n// data-btcolumns=\"integer\"\n// data-btclass=\"broken-table|string\"\n// data-btidentifier=\"bt-[index]|inherit|string\"\n// data-btid=\"integer\"\n\nconst breakTableContainers = document.querySelectorAll('.breaktableJS');\nconst lengthBreakTables = breakTableContainers.length;\nconst windowWidth = window.innerWidth;\nconst mobileBreakWidth = 768;\n\n// Handler when the DOM is fully loaded\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  windowWidthBreakTable();\n});\n\nwindow.addEventListener(\"resize\", function(){\n  if(window.innerWidth < mobileBreakWidth){\n    setBreakTableContainers();\n  }\n});\n\n// Check window width\nconst windowWidthBreakTable = () => {\n  if (windowWidth < mobileBreakWidth) {\n    getBreakTableContainers();\n  }\n}\n\n// Search doc for breaktable containers\nconst getBreakTableContainers = () => {\n  if (breakTableContainers) {\n    setBreakTableContainers();\n  }\n}\n\n// Iterate over all breaktables\nconst setBreakTableContainers = () => {\n  for (let i = 0; i < lengthBreakTables; i++) {\n    let table = breakTableContainers[i].getElementsByTagName(\"table\");\n    let l = table.length;\n\n    if (l === 1){\n\n      if (table[0].dataset.breaktables) {\n        if (table[0].dataset.btcolumns) {\n          buildBreakTables(i, table[0]);\n        } else {\n          console.log(\"ERROR: data-btcolumns attribute must be set on the table\");\n        }\n      } else {\n        console.log(\"ERROR: data-breaktable attribute must be set on the table\");\n      }\n\n    } else {\n      console.log(\"ERROR: breakTableContainers must contain one table only\");\n    }\n  }\n}\n\n// Return new tables\nconst buildBreakTables = (iBTcontainer, table) => {\n  // console.dir(table);\n\n  // SET table class name\n  let btClass = setBTclassName(table)\n\n  // GET all existing class names\n  let classArray = getClassNames(table, btClass)\n\n  // SET table ID name\n  let btID = setBTidName(iBTcontainer, table)\n\n  // SET total tables +1 for readable id names\n  let breakcolumns = JSON.parse(\"[\" + table.dataset.breaktables + \"]\");\n  let newTables = parseInt(breakcolumns.length) + 1;\n\n  // GET total number of columns\n  let totalColumns = parseInt(table.dataset.btcolumns);\n\n  // CREATE new tables\n  for (let i = 1; i < newTables; i++) {\n    let t = document.createElement('table');\n    t.classList.add(...classArray)\n    t.id = btID + '-' + [i];\n\n    let tableNode = t;\n\n    // args rule: parent > interval > child\n    addBTchildren(totalColumns, breakcolumns, table, i, tableNode);\n\n    // console.log(tableNode);\n    // console.dir(tableNode);\n    table.closest('.breaktableJS').appendChild(tableNode);\n  } // END for loop\n}\n\n// SET table class name: data-btclass=\"broken-table|string\"\nconst setBTclassName = (table) => {\n  let className = table.dataset.btclass;\n  return (className) ? className : \"broken-table\";\n}\n\nconst getClassNames = (table, btClass) => {\n  let classList = table.className.split(' ');\n  let classArray = [btClass];\n  classArray.push(...classList);\n  return classArray\n}\n\n// SET table ID: data-btidentifier=\"bt-[index]|inherit|string\"\nconst setBTidName = (iBTcontainer, table) => {\n  let id;\n  if (table.dataset.btidentifier) {\n    id = table.dataset.btidentifier;\n  } else if (table.id) {\n    id = table.id;\n  } else {\n    // if no ID use table index +1 for readable id names\n    let newIndex = iBTcontainer + 1;\n    id = 'bt' + '-' + newIndex;\n  }\n  return id;\n}\n\n// ADD table children\nconst addBTchildren = (totalColumns, breakcolumns, table, tableIndex, tableNode) => {\n  let l = table.children.length;\n  for (let i = 0; i < l; i++) {\n\n    // TODO: do not allow <colgroup>\n\n    let tagName = table.children[i].tagName;\n    let child = document.createElement(tagName);\n\n    tableNode.appendChild(child);\n\n    addBTrows(totalColumns, breakcolumns, tableIndex, tableNode, i, table.children[i]);\n  } // END for loop\n}\n\n// ADD table rows from child\nconst addBTrows = (totalColumns, breakcolumns, tableIndex, tableNode, childIndex, childNode) => {\n  let rowIndex = 0; // Due to ignored rows and rowSpan(?) the number of rows will not always equal the row loop interval\n  let rows = childNode.rows;\n  let l = childNode.rows.length;\n  for (let i = 0; i < l; i++) {\n\n    // TODO: if .rowSpan\n\n    // check if row has data-btid\n    if (rows[i].dataset.btid) {\n      let btid = getBTrowTrue(tableIndex, childNode, i);\n      // ADD row if data-btid is EQUAL to tableIndex\n      if (btid === true) {\n        let row = addBTrow(tableNode, childNode, i);\n        tableNode.children[childIndex].appendChild(row);\n        getBTcells(totalColumns, breakcolumns, tableIndex, tableNode, childIndex, rowIndex, rows[i]);\n        rowIndex ++;\n      } else {\n        continue;\n      }\n    } else {\n      let row = addBTrow(tableNode, childNode, i);\n      tableNode.children[childIndex].appendChild(row);\n      getBTcells(totalColumns, breakcolumns, tableIndex, tableNode, childIndex, rowIndex, rows[i]);\n      rowIndex ++;\n    }\n  } // END for loop\n}\n\n// RETURN rows equal to data-btid\nconst getBTrowTrue = (tableIndex, childNode, rowsIndex) => {\n  let str = childNode.rows[rowsIndex].dataset.btid;\n  let array = JSON.parse(\"[\" + str + \"]\");\n  if (array.includes(tableIndex)) {\n    return true;\n  }\n}\n\n// ADD table row\nconst addBTrow = (tableNode, child, index) => {\n  let tagName = child.rows[index].tagName;\n  let row = document.createElement(tagName);\n  if (child.rows[index].className) {\n    row.className = child.rows[index].className;\n  }\n  return row;\n}\n\n// GET table cells\nconst getBTcells = (totalColumns, breakcolumns, tableIndex, tableNode, childIndex, rowIndex, rowNode) => {\n  let l = rowNode.children.length;\n  let columnIndex = tableIndex - 1;\n  columnIndex = breakcolumns[columnIndex]\n\n  for (let i = 0; i < l; i++) {\n    let cell = rowNode.children[i];\n\n    let cellInterval = i+1;\n    let cellIndex = cell.cellIndex + 1;\n    let tagName = getBTcellTagName(cell);\n\n    let cellVals = {};\n    cellVals.appendCell = false;\n\n    if (tagName === true ) { // if <th>\n      let scope = getBTcellScope(cell);\n\n      // TODO: how to handle scope= rowgroup && colgroup\n      // BUG: first column in thead must be scope=row\n      \n      if (scope === 'col') {\n        // cell = TH && scope=col\n        cellVals = getBTcellColSpan(totalColumns, columnIndex, cellInterval, cellIndex, cell);\n      } else {\n        // cell = TH && scope=row\n        cellVals = getBTcellRowSpan(totalColumns, cell);\n        cellVals.appendCell = true;\n      }\n    } else {\n      // cell = TD\n      cellVals = getBTcellColSpan(totalColumns, columnIndex, cellInterval, cellIndex, cell);\n    }\n\n    if (cellVals.appendCell === true) {\n      let element = addBTcell(cell, cellVals.cellColSpan)\n      tableNode.children[childIndex].rows[rowIndex].appendChild(element);\n    }\n  }\n\n}\n\nconst getBTcellTagName = cell => (cell.tagName == 'TH') ? true : false;\nconst getBTcellScope = cell => cell.scope;\n\nconst getBTcellRowSpan = (totalColumns, cell) => {\n  let colSpan = cell.colSpan;\n  let cellColSpan = 1;\n\n  if (totalColumns == colSpan) {\n    cellColSpan = colSpan - 1;\n  }\n\n  return {cellColSpan};\n}\n\nconst getBTcellColSpan = (totalColumns, columnIndex, cellInterval, cellIndex, cell) => {\n  let colSpan = cell.colSpan;\n  let cellColSpan = 1;\n  let appendCell = false;\n\n  if (colSpan >= 2 ) {\n    let spanLength = colSpan - 1;\n    let spanMax = cellIndex + spanLength\n\n    if ((cellIndex == cellInterval) && (columnIndex == cellInterval)) {\n      appendCell = true;\n    } else if ((spanMax >= columnIndex) && (columnIndex > cellInterval)) {\n      appendCell = true;\n    } else {\n      appendCell = false;\n    }\n  } else {\n    if (columnIndex == cellInterval) {\n      appendCell = true;\n    }\n  }\n\n  return {appendCell, cellColSpan};\n}\n\n// ADD table cell\nconst addBTcell = (cell, cellColSpan) => {\n  let tagName = cell.tagName;\n  let element = document.createElement(tagName);\n\n  element.className = cell.className;\n  element.scope = cell.scope;\n  element.colSpan = cellColSpan;\n  element.innerHTML = cell.innerHTML;\n\n  return element;\n}\n"]}